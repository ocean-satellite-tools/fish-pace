[
  {
    "objectID": "team.html#organizers-and-instructors",
    "href": "team.html#organizers-and-instructors",
    "title": "Our Team",
    "section": "Organizers and Instructors",
    "text": "Organizers and Instructors\n\n\nDr. Eli Holmes\n\n\nNOAA Fisheries and University of Washington, Seattle, USA.\nwebpage • GitHub • ORCID\n\n\nDr. Nimit Kumar\n\n\nIndian National Centre for Ocean Information Services (INCOIS), Hyderabad, India\nLinks: webpage • ORCID\n\n\nAditi Modi\n\nCentre for Climate Change Research, Indian Institute of Tropical Meteorology, Pune, India\nwebpage • GitHub • ORCID\n\n\nDr. Smitha BR\n\nCentre for Marine Living Resources & Ecology, Kochi, India\nwebpage • ORCID\n\n\n\n\nDr. Swarnali Majumder\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nwebpage • ORCID\n\n\nDr. TVS Uday Bhaskar\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nResearchGate • ORCID\n\n\nDr. Sourav Maity\n\nIndian National Centre for Ocean Information Services, Hyderabad, India\nResearchGate • ORCID"
  },
  {
    "objectID": "team.html#speakers",
    "href": "team.html#speakers",
    "title": "Our Team",
    "section": "Speakers",
    "text": "Speakers\n\n\nJohnny Konjarla\n\nCentre for Marine Living Resources & Ecology, Kochi, India\nwebpage • Linkedin • ORCID\n\n\nMyranda Shirk\n\nSenior Data Scientist, Vanderbilt University Data Science Institute\nLinkedin\n\n\nDr. Ben Best\n\nEcoQuants.com, Santa Barbara, CA\nwebpage • GitHub • ORCID\n\n\nMinh Phan\n\nApplied & Computational Mathematical Sciences, University of Washington, Seattle WA, USA\nGitHub • Linkedin\n\n\n\n\nDr. Sanitha K. Sivadas\n\nNational Centre for Coastal Research, Chennai, India\nOcean Expert • ORCID\n\n\nJiarui Yu\n\nApplied & Computational Mathematical Sciences, University of Washington, Seattle WA, USA\nGitHub • Linkedin"
  },
  {
    "objectID": "team.html#virtual-helpers",
    "href": "team.html#virtual-helpers",
    "title": "Our Team",
    "section": "Virtual Helpers",
    "text": "Virtual Helpers\n\n\nBen Tupper\n\nTandy Center for Ocean Forecasting, Bigelow Laboratory for Ocean Sciences, East Boothbay, Maine, USA.\nResearchGate\n\n\nDr. Julie Lowndes\n\nOpenscapes, Santa Barbara, California, USA\nWebsite • ORCID\n\n\nAdam Kemberling\n\nGulf of Maine Research Institute, Portland, Maine, USA.\nWebsite\n\n\nDr. Rachael Blake\n\nDirector of Data Science, Intertidal Agency, USA.\nWebsite • ORCID\n\n\n\n\nSuman Shekhar\n\nRutgers University, New Brunswick, NJ, USA.\nWebsite • GitHub\n\n\nSeungyeon Jade Hong\n\nGitHub"
  },
  {
    "objectID": "overview.html",
    "href": "overview.html",
    "title": "Overview",
    "section": "",
    "text": "The the era of big data in the earth sciences is here and learning how to effectively use oceanographic remote-sensing data, both in the cloud and on your computer, is a core skill for modern fisheries science and management. Learning how to access cloud-based data, visualize these data, use these data in models, and use the tools of modern reproducible and collaborative science is the main goal of this course. Through the course, participants will gain experience with assessing remote-sensing data in the cloud, R and RStudio, and collaborating with Git and GitHub. Python users: Python is also very heavily used in big data geosciences. The course tutorials will focus on R, however you are welcome to use Python during the course if you are more comfortable with that."
  },
  {
    "objectID": "overview.html#hackweek-focus-species-distribution-modelling",
    "href": "overview.html#hackweek-focus-species-distribution-modelling",
    "title": "Overview",
    "section": "Hackweek focus: species distribution modelling",
    "text": "Hackweek focus: species distribution modelling\nIn depth understanding of machine learning for species (macrofauna) distribution modelling (SDM) is needed by many young ecosystem researchers. SDMs are an important class of models used to understand species association with the environment. SDMs are widely used to understand how species distributions are changing with ocean climate change and are also used to estimate abundance over large ocean regions from fisheries survey data. This course is devised to familiarize the young professionals in the Indian Ocean-rim (IOR) countries with the latest developments in this field.\nThis course does not aim to teach ecology and habitat to the oceanographers/modellers/machine learning experts, rather it aims to teach machine learning and coding (and its relevance to fisheries) to fishery professionals."
  },
  {
    "objectID": "overview.html#aims-and-objectives",
    "href": "overview.html#aims-and-objectives",
    "title": "Overview",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\n\nLearn how to discover and use oceanographic remote-sensing data for species distribution modeling and other fisheries applications\nFamiliarize participants with using remote-sensing data in R within models. Note participants who are more familiar with Python are welcome to use Python also.\nIntroduce the participants to machine learning models used in species distribution modelling.\nObtain hands-on experience in using species distribution modelling and machine-learning with remote-sensing data.\nWork on a group project using species distribution modelling to estimate habitat associations or obtain a stock estimate using a species distribution model.\n\nNote, there are many ways that participants can study aspects of species distribution using remote-sensing data. During the hackweek portion of the course, participants will jointly develop project to work on and in order to learn by diving into a specific project. Species location data will not be specifically required in order to engage in the projects."
  },
  {
    "objectID": "overview.html#what-is-a-hackweek",
    "href": "overview.html#what-is-a-hackweek",
    "title": "Overview",
    "section": "What is a hackweek?",
    "text": "What is a hackweek?\nA hackweek is a participant-driven workshop that blends data science education, community building, and project work over a short period of time (one to two weeks). The events are highly immersive and allow participants to work directly with data science professionals to co-shape projects and educational outcomes. Hackweeks help individuals and teams engage more effectively in open and reproducible science. - eScience Institute, University of Washington, Seattle USA\nThe hackweek model has become a vital tool in the data science community, fostering idea exchange through modern data analysis workflow training. Unlike traditional academic events, hackweeks offer intensive, interactive learning, including tutorials on cutting-edge methods, peer-based learning, and collaborative on-site projects. Unlike hackathons, which emphasize software development, hackweeks prioritize education and open-ended projects, benefiting fields needing both expertise and efficient computational workflows for idea exchange and discovery. The hackweek model is now widely used in many fields: Astrohackweek, Neurohackweek, Geohackweek, OceanHackWeek, ICESat-2 Hackweek, SnowEx Hackweek, NASA Cloud Hackathon. The ITCOocean Hack2week is modeled off the University of Washington eScience Hackweek model."
  },
  {
    "objectID": "overview.html#what-to-expect",
    "href": "overview.html#what-to-expect",
    "title": "Overview",
    "section": "What to expect",
    "text": "What to expect\n\nDuring the first week of the ITCOocean hack2week, participants will work on learning how to access, visualize and manipulate remote-sensing data in R. Participants will develop familiarity with the R language, with RStudio, and with Git and GitHub for collaboration.\nDuring the second week, participants will begin focusing on species distribution modeling and will work on a team project.\nThe course is an open science event: all tutorials and examples are developed openly and will be publicly available during and following the course. Participants will strengthen their practice of open science, using open source code and collaborating on their projects with course peers.\n\nIn the two to three weeks leading up to the course, participants are encouraged to review background resources that will facilitate a more effective experience."
  },
  {
    "objectID": "overview.html#code-of-conduct",
    "href": "overview.html#code-of-conduct",
    "title": "Overview",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nThe 2023 ITCOocean Hackweek is a safe learning space and all participants are required to abide by our Code of Conduct."
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html",
    "href": "notebooks-data/02_IO_Zarr.html",
    "title": "IO zarr dataset",
    "section": "",
    "text": "This tutorial guides you through some of the fundamental functions you may use while exploring the Indian Ocean zarr dataset.\nThis tutorial utilizes the xarray library. You can also use the Zarr library which is specialized in handling this type of dataset. Xarray is more well-known in the Python developer community, hence the preference. It also works seamlessly with other popular data libraries like Pandas, NumPy, and Dask.",
    "crumbs": [
      "Tutorials",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#about-our-product",
    "href": "notebooks-data/02_IO_Zarr.html#about-our-product",
    "title": "IO zarr dataset",
    "section": "About our product",
    "text": "About our product\nOur final product INDIAN_OCEAN_025GRID_DAILY.zarr is a blended dataset formated as a .zarr file, containing daily cleaned and interpolated data from fifteen variables across multiple sources, mostly from processed NASA/NOAA and Copernicus collections:\nNote dataset updated in 2024 with more CHL variables\n\nadt: sea surface height above geoid (m)\nair_temp: air temperature (K)\nCHL: chlorophyll-a concentration (mg/m**3)\nCHL_uncertainty: chlorophyll-a concentration uncertainty (%)\nmlotst: mean ocean mixed layer thickness (m)\nsla: sea level anomaly (m)\nso: sea salinity concentration (m**-3 or PSL)\nsst: sea surface temperature (K)\ntopo: topography (m)\nu_curr: u-component of total surface currents (m/s)\nv_curr: v-component of total surface currents (m/s)\nug_curr: u-component of geostrophic surface currents (m/s)\nvg_curr: v-component of geostrophic surface currents (m/s)\nu_wind: u-component of surface wind (m/s)\nv_wind: v-component of surface wind (m/s)\n\nWe also computed four additional components, namely: * curr_speed: total current speed (m/s) * curr_dir: total current direction (degrees) * wind_speed: surface wind speed (m/s) * wind_dir: surface wind direction (degrees)\nAll variables have been broadcasted to all fit in the temporal range we have. Therefore, not all variable data are available at any time. Check out each individual variable before use.",
    "crumbs": [
      "Tutorials",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#load-necessary-libraries",
    "href": "notebooks-data/02_IO_Zarr.html#load-necessary-libraries",
    "title": "IO zarr dataset",
    "section": "Load necessary libraries",
    "text": "Load necessary libraries\n\nimport xarray as xr\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt # simple plotting\nimport holoviews as hv # simple plotting\nimport hvplot.xarray # simple plotting\nimport cmocean",
    "crumbs": [
      "Tutorials",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#read-data",
    "href": "notebooks-data/02_IO_Zarr.html#read-data",
    "title": "IO zarr dataset",
    "section": "Read data",
    "text": "Read data\n\nds = xr.open_zarr('/home/jovyan/shared/data/INDIAN_OCEAN_025GRID_DAILY.zarr/')\n\n\nds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nCHL_uncertainty(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]coverage_content_type :qualityInformationlong_name :Chlorophyll-a concentration - Uncertainty estimationunits :%valid_max :32767valid_min :0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nadt(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nair_temp(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :2 metre temperaturenameCDM :2_metre_temperature_surfacenameECMWF :2 metre temperatureproduct_type :analysisshortNameECMWF :2tstandard_name :air_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \ncurr_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comments :Computed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average direction of total surface currentsunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \ncurr_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comments :Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average total surface current speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nmlotst(time, lat, lon)float32dask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 681, 1440]cell_methods :area: meanlong_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunit_long :Metersunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         81.36 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (500, 177, 241) \n                    \n                    \n                         Dask graph \n                         33 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nsla(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;ancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nso(time, lat, lon)float32dask.array&lt;chunksize=(500, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 7, 341, 720]cell_methods :area: meanlong_name :mean sea water salinity at 0.49 metres below ocean surfacestandard_name :sea_water_salinityunit_long :Practical Salinity Unitunits :1e-3valid_max :28336valid_min :1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         81.36 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (500, 177, 241) \n                    \n                    \n                         Dask graph \n                         33 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nsst(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :Sea surface temperaturenameCDM :Sea_surface_temperature_surfacenameECMWF :Sea surface temperatureproduct_type :analysisshortNameECMWF :sststandard_name :sea_surface_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \ntopo(lat, lon)float64dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :meters\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         333.26 kiB \n                         333.26 kiB \n                    \n                    \n                    \n                         Shape \n                         (177, 241) \n                         (177, 241) \n                    \n                    \n                         Dask graph \n                         1 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n\n        \n    \nu_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nug_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :zonal geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nv_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :meridional total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nv_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :10 metre V wind componentnameCDM :10_metre_V_wind_component_surfacenameECMWF :10 metre V wind componentproduct_type :analysisshortNameECMWF :10vstandard_name :northward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nvg_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :meridional geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nwind_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :10 metre wind directionunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nwind_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :10 metre absolute speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can slice data by the dimensions (latitude, longitude, time) and data variables.\n\n# slice by latitude\n# notice how we specify the range in reverse\nds.sel(lat=slice(0, -12))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 49, lon: 241)\nCoordinates:\n  * lat              (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 49lon: 241Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nCHL_uncertainty(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]coverage_content_type :qualityInformationlong_name :Chlorophyll-a concentration - Uncertainty estimationunits :%valid_max :32767valid_min :0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nadt(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nair_temp(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :2 metre temperaturenameCDM :2_metre_temperature_surfacenameECMWF :2 metre temperatureproduct_type :analysisshortNameECMWF :2tstandard_name :air_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \ncurr_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comments :Computed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average direction of total surface currentsunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \ncurr_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comments :Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average total surface current speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nmlotst(time, lat, lon)float32dask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 681, 1440]cell_methods :area: meanlong_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunit_long :Metersunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         22.52 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (500, 49, 241) \n                    \n                    \n                         Dask graph \n                         33 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nsla(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;ancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nso(time, lat, lon)float32dask.array&lt;chunksize=(500, 49, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 7, 341, 720]cell_methods :area: meanlong_name :mean sea water salinity at 0.49 metres below ocean surfacestandard_name :sea_water_salinityunit_long :Practical Salinity Unitunits :1e-3valid_max :28336valid_min :1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         22.52 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (500, 49, 241) \n                    \n                    \n                         Dask graph \n                         33 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nsst(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :Sea surface temperaturenameCDM :Sea_surface_temperature_surfacenameECMWF :Sea surface temperatureproduct_type :analysisshortNameECMWF :sststandard_name :sea_surface_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \ntopo(lat, lon)float64dask.array&lt;chunksize=(49, 241), meta=np.ndarray&gt;colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :meters\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         92.26 kiB \n                         92.26 kiB \n                    \n                    \n                    \n                         Shape \n                         (49, 241) \n                         (49, 241) \n                    \n                    \n                         Dask graph \n                         1 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n\n        \n    \nu_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nug_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :zonal geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nv_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :meridional total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nv_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :10 metre V wind componentnameCDM :10_metre_V_wind_component_surfacenameECMWF :10 metre V wind componentproduct_type :analysisshortNameECMWF :10vstandard_name :northward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nvg_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :meridional geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nwind_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :10 metre wind directionunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nwind_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 49, 241), meta=np.ndarray&gt;long_name :10 metre absolute speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         723.96 MiB \n                         4.50 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 49, 241) \n                         (100, 49, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  49\n  16071\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([   0.0,  -0.25,   -0.5,  -0.75,   -1.0,  -1.25,   -1.5,  -1.75,   -2.0,\n        -2.25,   -2.5,  -2.75,   -3.0,  -3.25,   -3.5,  -3.75,   -4.0,  -4.25,\n         -4.5,  -4.75,   -5.0,  -5.25,   -5.5,  -5.75,   -6.0,  -6.25,   -6.5,\n        -6.75,   -7.0,  -7.25,   -7.5,  -7.75,   -8.0,  -8.25,   -8.5,  -8.75,\n         -9.0,  -9.25,   -9.5,  -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0,\n       -11.25,  -11.5, -11.75,  -12.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by longitude\nds.sel(lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 16071, lat: 177, lon: 13)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 44.5 44.75 45.0\n  * time             (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 13Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nCHL_uncertainty(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]coverage_content_type :qualityInformationlong_name :Chlorophyll-a concentration - Uncertainty estimationunits :%valid_max :32767valid_min :0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nadt(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nair_temp(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :2 metre temperaturenameCDM :2_metre_temperature_surfacenameECMWF :2 metre temperatureproduct_type :analysisshortNameECMWF :2tstandard_name :air_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \ncurr_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comments :Computed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average direction of total surface currentsunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \ncurr_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comments :Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average total surface current speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nmlotst(time, lat, lon)float32dask.array&lt;chunksize=(500, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 681, 1440]cell_methods :area: meanlong_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunit_long :Metersunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         4.39 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (500, 177, 13) \n                    \n                    \n                         Dask graph \n                         33 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nsla(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;ancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nso(time, lat, lon)float32dask.array&lt;chunksize=(500, 177, 13), meta=np.ndarray&gt;_ChunkSizes :[1, 7, 341, 720]cell_methods :area: meanlong_name :mean sea water salinity at 0.49 metres below ocean surfacestandard_name :sea_water_salinityunit_long :Practical Salinity Unitunits :1e-3valid_max :28336valid_min :1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         4.39 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (500, 177, 13) \n                    \n                    \n                         Dask graph \n                         33 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nsst(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :Sea surface temperaturenameCDM :Sea_surface_temperature_surfacenameECMWF :Sea surface temperatureproduct_type :analysisshortNameECMWF :sststandard_name :sea_surface_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \ntopo(lat, lon)float64dask.array&lt;chunksize=(177, 13), meta=np.ndarray&gt;colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :meters\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         17.98 kiB \n                         17.98 kiB \n                    \n                    \n                    \n                         Shape \n                         (177, 13) \n                         (177, 13) \n                    \n                    \n                         Dask graph \n                         1 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n\n        \n    \nu_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nug_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :zonal geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nv_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :meridional total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nv_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :10 metre V wind componentnameCDM :10_metre_V_wind_component_surfacenameECMWF :10 metre V wind componentproduct_type :analysisshortNameECMWF :10vstandard_name :northward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nvg_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :meridional geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nwind_dir(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :10 metre wind directionunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nwind_speed(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 13), meta=np.ndarray&gt;long_name :10 metre absolute speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         141.07 MiB \n                         898.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 13) \n                         (100, 177, 13) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  177\n  16071\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([ 42.0, 42.25,  42.5, 42.75,  43.0, 43.25,  43.5, 43.75,  44.0, 44.25,\n        44.5, 44.75,  45.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by time\nds.sel(time=slice('1998', '1999'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:          (time: 730, lat: 177, lon: 241)\nCoordinates:\n  * lat              (lat) float32 32.0 31.75 31.5 31.25 ... -11.5 -11.75 -12.0\n  * lon              (lon) float32 42.0 42.25 42.5 42.75 ... 101.5 101.8 102.0\n  * time             (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nCHL_uncertainty(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]coverage_content_type :qualityInformationlong_name :Chlorophyll-a concentration - Uncertainty estimationunits :%valid_max :32767valid_min :0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nadt(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comment :The absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for detailsgrid_mapping :crslong_name :Absolute dynamic topographystandard_name :sea_surface_height_above_geoidunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nair_temp(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :2 metre temperaturenameCDM :2_metre_temperature_surfacenameECMWF :2 metre temperatureproduct_type :analysisshortNameECMWF :2tstandard_name :air_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \ncurr_dir(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comments :Computed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average direction of total surface currentsunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \ncurr_speed(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comments :Velocities are an average over the top 30m of the mixed layerdepth :15mlong_name :average total surface current speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nmlotst(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 681, 1440]cell_methods :area: meanlong_name :Density ocean mixed layer thicknessstandard_name :ocean_mixed_layer_thickness_defined_by_sigma_thetaunit_long :Metersunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         81.36 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (500, 177, 241) \n                    \n                    \n                         Dask graph \n                         3 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nsla(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;ancillary_variables :err_slacomment :The sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for detailsgrid_mapping :crslong_name :Sea level anomalystandard_name :sea_surface_height_above_sea_levelunits :m\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nso(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;_ChunkSizes :[1, 7, 341, 720]cell_methods :area: meanlong_name :mean sea water salinity at 0.49 metres below ocean surfacestandard_name :sea_water_salinityunit_long :Practical Salinity Unitunits :1e-3valid_max :28336valid_min :1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         81.36 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (500, 177, 241) \n                    \n                    \n                         Dask graph \n                         3 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nsst(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :Sea surface temperaturenameCDM :Sea_surface_temperature_surfacenameECMWF :Sea surface temperatureproduct_type :analysisshortNameECMWF :sststandard_name :sea_surface_temperatureunits :K\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \ntopo(lat, lon)float64dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;colorBarMaximum :8000.0colorBarMinimum :-8000.0colorBarPalette :Topographygrid_mapping :GDAL_Geographicsioos_category :Locationlong_name :Topographystandard_name :altitudeunits :meters\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         333.26 kiB \n                         333.26 kiB \n                    \n                    \n                    \n                         Shape \n                         (177, 241) \n                         (177, 241) \n                    \n                    \n                         Dask graph \n                         1 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float64 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n\n        \n    \nu_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nug_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :zonal geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nv_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :meridional total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nv_wind(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :10 metre V wind componentnameCDM :10_metre_V_wind_component_surfacenameECMWF :10 metre V wind componentproduct_type :analysisshortNameECMWF :10vstandard_name :northward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nvg_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;comment :Geostrophic velocities calculated from absolute dynamic topographydepth :15mlong_name :meridional geostrophic surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148standard_name :geostrophic_northward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nwind_dir(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :10 metre wind directionunits :degrees\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nwind_speed(time, lat, lon)float32dask.array&lt;chunksize=(60, 177, 241), meta=np.ndarray&gt;long_name :10 metre absolute speedunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         118.79 MiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (730, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  730\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\n               '1998-01-05', '1998-01-06', '1998-01-07', '1998-01-08',\n               '1998-01-09', '1998-01-10',\n               ...\n               '1999-12-22', '1999-12-23', '1999-12-24', '1999-12-25',\n               '1999-12-26', '1999-12-27', '1999-12-28', '1999-12-29',\n               '1999-12-30', '1999-12-31'],\n              dtype='datetime64[ns]', name='time', length=730, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# slice by variable\nds[['u_curr', 'u_wind']]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 16071, lat: 177, lon: 241)\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n  * time     (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 16071lat: 177lon: 241Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(100, 177, 241), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         2.55 GiB \n                         16.27 MiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 177, 241) \n                         (100, 177, 241) \n                    \n                    \n                         Dask graph \n                         161 chunks in 2 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n  16071\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\n\n# combine multiple slicing options all at once\nds[['u_curr', 'u_wind']].sel(time=slice('1998', '1999'), \n                             lat=slice(0, -12), \n                             lon=slice(42, 45))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 730, lat: 49, lon: 13)\nCoordinates:\n  * lat      (lat) float32 0.0 -0.25 -0.5 -0.75 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 43.0 ... 44.25 44.5 44.75 45.0\n  * time     (time) datetime64[ns] 1998-01-01 1998-01-02 ... 1999-12-31\nData variables:\n    u_curr   (time, lat, lon) float32 dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;\n    u_wind   (time, lat, lon) float32 dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 730lat: 49lon: 13Coordinates: (3)lat(lat)float320.0 -0.25 -0.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([  0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,  -1.75,  -2.  ,\n        -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,  -4.  ,  -4.25,\n        -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,  -6.25,  -6.5 ,\n        -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,  -8.5 ,  -8.75,\n        -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 , -10.75, -11.  ,\n       -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 44.5 44.75 45.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([42.  , 42.25, 42.5 , 42.75, 43.  , 43.25, 43.5 , 43.75, 44.  , 44.25,\n       44.5 , 44.75, 45.  ], dtype=float32)time(time)datetime64[ns]1998-01-01 ... 1999-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1998-01-01T00:00:00.000000000', '1998-01-02T00:00:00.000000000',\n       '1998-01-03T00:00:00.000000000', ..., '1999-12-29T00:00:00.000000000',\n       '1999-12-30T00:00:00.000000000', '1999-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (2)u_curr(time, lat, lon)float32dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;comment :Velocities are an average over the top 30m of the mixed layercoverage_content_type :modelResultdepth :15mlong_name :zonal total surface currentsource :SSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02standard_name :eastward_sea_water_velocityunits :m s-1valid_max :3.0valid_min :-3.0\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         1.77 MiB \n                         248.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (730, 49, 13) \n                         (100, 49, 13) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  49\n  730\n\n        \n    \nu_wind(time, lat, lon)float32dask.array&lt;chunksize=(60, 49, 13), meta=np.ndarray&gt;long_name :10 metre U wind componentnameCDM :10_metre_U_wind_component_surfacenameECMWF :10 metre U wind componentproduct_type :analysisshortNameECMWF :10ustandard_name :eastward_windunits :m s**-1\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         1.77 MiB \n                         248.83 kiB \n                    \n                    \n                    \n                         Shape \n                         (730, 49, 13) \n                         (100, 49, 13) \n                    \n                    \n                         Dask graph \n                         8 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  13\n  49\n  730\n\n        \n    \nIndexes: (3)latPandasIndexPandasIndex(Index([   0.0,  -0.25,   -0.5,  -0.75,   -1.0,  -1.25,   -1.5,  -1.75,   -2.0,\n        -2.25,   -2.5,  -2.75,   -3.0,  -3.25,   -3.5,  -3.75,   -4.0,  -4.25,\n         -4.5,  -4.75,   -5.0,  -5.25,   -5.5,  -5.75,   -6.0,  -6.25,   -6.5,\n        -6.75,   -7.0,  -7.25,   -7.5,  -7.75,   -8.0,  -8.25,   -8.5,  -8.75,\n         -9.0,  -9.25,   -9.5,  -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0,\n       -11.25,  -11.5, -11.75,  -12.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 42.0, 42.25,  42.5, 42.75,  43.0, 43.25,  43.5, 43.75,  44.0, 44.25,\n        44.5, 44.75,  45.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1998-01-01', '1998-01-02', '1998-01-03', '1998-01-04',\n               '1998-01-05', '1998-01-06', '1998-01-07', '1998-01-08',\n               '1998-01-09', '1998-01-10',\n               ...\n               '1999-12-22', '1999-12-23', '1999-12-24', '1999-12-25',\n               '1999-12-26', '1999-12-27', '1999-12-28', '1999-12-29',\n               '1999-12-30', '1999-12-31'],\n              dtype='datetime64[ns]', name='time', length=730, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean\n\n\nWe can also graph the data right from slicing, especially heatmaps from 2D arrays, or line charts. This is especially useful when we want to inspect elements on the go.\n\n# make sure that the array you slice for a heatmap visualization is a 2D array\nheatmap_arr = ds['wind_speed'].sel(time='2000-01-02')\nheatmap_arr\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'wind_speed' (lat: 177, lon: 241)&gt;\ndask.array&lt;getitem, shape=(177, 241), dtype=float32, chunksize=(177, 241), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 32.0 31.75 31.5 31.25 ... -11.25 -11.5 -11.75 -12.0\n  * lon      (lon) float32 42.0 42.25 42.5 42.75 ... 101.2 101.5 101.8 102.0\n    time     datetime64[ns] 2000-01-02\nAttributes:\n    long_name:  10 metre absolute speed\n    units:      m s**-1xarray.DataArray'wind_speed'lat: 177lon: 241dask.array&lt;chunksize=(177, 241), meta=np.ndarray&gt;\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         166.63 kiB \n                         166.63 kiB \n                    \n                    \n                    \n                         Shape \n                         (177, 241) \n                         (177, 241) \n                    \n                    \n                         Dask graph \n                         1 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  241\n  177\n\n        \n    \nCoordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -11.75 -12.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([ 32.  ,  31.75,  31.5 ,  31.25,  31.  ,  30.75,  30.5 ,  30.25,  30.  ,\n        29.75,  29.5 ,  29.25,  29.  ,  28.75,  28.5 ,  28.25,  28.  ,  27.75,\n        27.5 ,  27.25,  27.  ,  26.75,  26.5 ,  26.25,  26.  ,  25.75,  25.5 ,\n        25.25,  25.  ,  24.75,  24.5 ,  24.25,  24.  ,  23.75,  23.5 ,  23.25,\n        23.  ,  22.75,  22.5 ,  22.25,  22.  ,  21.75,  21.5 ,  21.25,  21.  ,\n        20.75,  20.5 ,  20.25,  20.  ,  19.75,  19.5 ,  19.25,  19.  ,  18.75,\n        18.5 ,  18.25,  18.  ,  17.75,  17.5 ,  17.25,  17.  ,  16.75,  16.5 ,\n        16.25,  16.  ,  15.75,  15.5 ,  15.25,  15.  ,  14.75,  14.5 ,  14.25,\n        14.  ,  13.75,  13.5 ,  13.25,  13.  ,  12.75,  12.5 ,  12.25,  12.  ,\n        11.75,  11.5 ,  11.25,  11.  ,  10.75,  10.5 ,  10.25,  10.  ,   9.75,\n         9.5 ,   9.25,   9.  ,   8.75,   8.5 ,   8.25,   8.  ,   7.75,   7.5 ,\n         7.25,   7.  ,   6.75,   6.5 ,   6.25,   6.  ,   5.75,   5.5 ,   5.25,\n         5.  ,   4.75,   4.5 ,   4.25,   4.  ,   3.75,   3.5 ,   3.25,   3.  ,\n         2.75,   2.5 ,   2.25,   2.  ,   1.75,   1.5 ,   1.25,   1.  ,   0.75,\n         0.5 ,   0.25,   0.  ,  -0.25,  -0.5 ,  -0.75,  -1.  ,  -1.25,  -1.5 ,\n        -1.75,  -2.  ,  -2.25,  -2.5 ,  -2.75,  -3.  ,  -3.25,  -3.5 ,  -3.75,\n        -4.  ,  -4.25,  -4.5 ,  -4.75,  -5.  ,  -5.25,  -5.5 ,  -5.75,  -6.  ,\n        -6.25,  -6.5 ,  -6.75,  -7.  ,  -7.25,  -7.5 ,  -7.75,  -8.  ,  -8.25,\n        -8.5 ,  -8.75,  -9.  ,  -9.25,  -9.5 ,  -9.75, -10.  , -10.25, -10.5 ,\n       -10.75, -11.  , -11.25, -11.5 , -11.75, -12.  ], dtype=float32)lon(lon)float3242.0 42.25 42.5 ... 101.8 102.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([ 42.  ,  42.25,  42.5 , ..., 101.5 , 101.75, 102.  ], dtype=float32)time()datetime64[ns]2000-01-02axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array('2000-01-02T00:00:00.000000000', dtype='datetime64[ns]')Indexes: (2)latPandasIndexPandasIndex(Index([  32.0,  31.75,   31.5,  31.25,   31.0,  30.75,   30.5,  30.25,   30.0,\n        29.75,\n       ...\n        -9.75,  -10.0, -10.25,  -10.5, -10.75,  -11.0, -11.25,  -11.5, -11.75,\n        -12.0],\n      dtype='float32', name='lat', length=177))lonPandasIndexPandasIndex(Index([  42.0,  42.25,   42.5,  42.75,   43.0,  43.25,   43.5,  43.75,   44.0,\n        44.25,\n       ...\n        99.75,  100.0, 100.25,  100.5, 100.75,  101.0, 101.25,  101.5, 101.75,\n        102.0],\n      dtype='float32', name='lon', length=241))Attributes: (2)long_name :10 metre absolute speedunits :m s**-1\n\n\n\nheatmap_arr.plot.imshow()\n\n\n\n\n\n\n\n\n\n# contour map with no filling\nheatmap_arr.plot.contour()\n\n\n\n\n\n\n\n\n\n# contour map with color filling\nheatmap_arr.plot.contourf()\n\n\n\n\n\n\n\n\n\nheatmap_arr.plot.surface()\n\n\n\n\n\n\n\n\n\nLine plots\n\nds['wind_speed'].mean(dim=['lat', 'lon']).plot(figsize=(10, 5))\n\n\n\n\n\n\n\n\nWe can add in parameters to customize our graphs, as additional arguments are passed to the underlying matplotlib plot() function.\n\nds['air_temp'].mean(dim=['lat', 'lon']).sel(time=slice('2007', '2009')).plot.line('r-o', figsize=(10,5), markersize=1)\n\n\n\n\n\n\n\n\n\n\nHistogram\n\n# creating a new Axe object if there is no currently\n# available one\nax = plt.gca() \nds['wind_dir'].plot.hist(ax = ax)\nax.set_xlabel('10 metre wind direction (degrees east)')\nax.set_ylabel('frequency')\nax.set_title('Daily average wind direction distribution over covered area (1979-2022)')\n\nText(0.5, 1.0, 'Daily average wind direction distribution over covered area (1979-2022)')\n\n\n\n\n\n\n\n\n\n\n# scroll along the axes to stretch the graph\nheatmap_arr.hvplot().options(cmap='bgy', width=600, height=500)",
    "crumbs": [
      "Tutorials",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "notebooks-data/02_IO_Zarr.html#resampling",
    "href": "notebooks-data/02_IO_Zarr.html#resampling",
    "title": "IO zarr dataset",
    "section": "Resampling",
    "text": "Resampling\n\nWith xarray\nIf your xarray version works just fine with resample(), here’s the most straightforward way to resample your data temporally. It may take a long while for the data to finish resampling, especially if your dataset is big and your resampling frequency is small.\n\nds_resampled = ds['CHL'].resample(time='1M').mean()\n\n\n\nWithout xarray\nIf not, which was the case we encountered for a bit during the documentation, we developed a roundabout using Pandas’ equivalent function with the same name, which also happened to also be the underlying function that the library itself depends on (of course, more optimized), to help us perform resampling on our dataset.\n\n# resampling is having issues, so this is a temporary solution using Pandas \n# to perform resampling by month on one range...\n\n# choose a small range just in case overloadding happens...\n\nds_to_resample = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).to_dataframe()\n\n\ndf_resampled = ds_to_resample.groupby([pd.Grouper(freq='1M', level='time'),\n                        pd.Grouper(level='lon'),\n                        pd.Grouper(level='lat')]).mean()\n\n\nds_resampled = xr.Dataset.from_dataframe(df_resampled)\n\nWe can see that after resampling, our time dimension size is reduced from 8523 (days) to 280 (months). Resampling is successful!\n\n# original ds_to_resample object before converting to dataframe\nds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.DataArray 'CHL' (time: 16071, lat: 21, lon: 21)&gt;\ndask.array&lt;getitem, shape=(16071, 21, 21), dtype=float32, chunksize=(100, 21, 21), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * lat      (lat) float32 10.0 9.75 9.5 9.25 9.0 8.75 ... 6.0 5.75 5.5 5.25 5.0\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * time     (time) datetime64[ns] 1979-01-01 1979-01-02 ... 2022-12-31\nAttributes:\n    _ChunkSizes:                [1, 256, 256]\n    ancillary_variables:        flags CHL_uncertainty\n    coverage_content_type:      modelResult\n    input_files_reprocessings:  Processors versions: MODIS R2022.0NRT/VIIRSN ...\n    long_name:                  Chlorophyll-a concentration - Mean of the bin...\n    standard_name:              mass_concentration_of_chlorophyll_a_in_sea_water\n    type:                       surface\n    units:                      milligram m-3\n    valid_max:                  1000.0\n    valid_min:                  0.0xarray.DataArray'CHL'time: 16071lat: 21lon: 21dask.array&lt;chunksize=(100, 21, 21), meta=np.ndarray&gt;\n    \n        \n            \n                \n                    \n                         \n                         Array \n                         Chunk \n                    \n                \n                \n                    \n                    \n                         Bytes \n                         27.04 MiB \n                         172.27 kiB \n                    \n                    \n                    \n                         Shape \n                         (16071, 21, 21) \n                         (100, 21, 21) \n                    \n                    \n                         Dask graph \n                         161 chunks in 3 graph layers \n                    \n                    \n                         Data type \n                         float32 numpy.ndarray \n                    \n                \n            \n        \n        \n        \n\n  \n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  \n  \n\n  \n  \n  \n\n  \n  \n\n  \n  21\n  21\n  16071\n\n        \n    \nCoordinates: (3)lat(lat)float3210.0 9.75 9.5 9.25 ... 5.5 5.25 5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([10.  ,  9.75,  9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,\n        7.5 ,  7.25,  7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,\n        5.  ], dtype=float32)lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)time(time)datetime64[ns]1979-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['1979-01-01T00:00:00.000000000', '1979-01-02T00:00:00.000000000',\n       '1979-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Indexes: (3)latPandasIndexPandasIndex(Index([10.0, 9.75,  9.5, 9.25,  9.0, 8.75,  8.5, 8.25,  8.0, 7.75,  7.5, 7.25,\n        7.0, 6.75,  6.5, 6.25,  6.0, 5.75,  5.5, 5.25,  5.0],\n      dtype='float32', name='lat'))lonPandasIndexPandasIndex(Index([ 75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))timePandasIndexPandasIndex(DatetimeIndex(['1979-01-01', '1979-01-02', '1979-01-03', '1979-01-04',\n               '1979-01-05', '1979-01-06', '1979-01-07', '1979-01-08',\n               '1979-01-09', '1979-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=16071, freq=None))Attributes: (10)_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\nds_resampled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt;\nDimensions:  (time: 528, lon: 21, lat: 21)\nCoordinates:\n  * time     (time) datetime64[ns] 1979-01-31 1979-02-28 ... 2022-12-31\n  * lon      (lon) float32 75.0 75.25 75.5 75.75 76.0 ... 79.25 79.5 79.75 80.0\n  * lat      (lat) float32 5.0 5.25 5.5 5.75 6.0 6.25 ... 9.0 9.25 9.5 9.75 10.0\nData variables:\n    CHL      (time, lon, lat) float32 nan nan nan nan ... 3.221 2.768 nan 1.353xarray.DatasetDimensions:time: 528lon: 21lat: 21Coordinates: (3)time(time)datetime64[ns]1979-01-31 ... 2022-12-31array(['1979-01-31T00:00:00.000000000', '1979-02-28T00:00:00.000000000',\n       '1979-03-31T00:00:00.000000000', ..., '2022-10-31T00:00:00.000000000',\n       '2022-11-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')lon(lon)float3275.0 75.25 75.5 ... 79.5 79.75 80.0array([75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  ], dtype=float32)lat(lat)float325.0 5.25 5.5 5.75 ... 9.5 9.75 10.0array([ 5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,  6.5 ,  6.75,  7.  ,  7.25,\n        7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,  9.  ,  9.25,  9.5 ,  9.75,\n       10.  ], dtype=float32)Data variables: (1)CHL(time, lon, lat)float32nan nan nan nan ... 2.768 nan 1.353array([[[       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        ...,\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan]],\n\n       [[       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n        [       nan,        nan,        nan, ...,        nan,\n                nan,        nan],\n...\n        [0.2705628 , 0.25798783, 0.25561604, ..., 1.4041072 ,\n         1.4939387 , 1.8776367 ],\n        [0.32376617, 0.2919578 , 0.28656372, ..., 1.7322022 ,\n         1.8477138 , 1.8143107 ],\n        [0.30853522, 0.3436496 , 0.3281598 , ..., 2.5401766 ,\n                nan, 1.3396835 ]],\n\n       [[0.23880072, 0.24270938, 0.24283718, ..., 0.20560512,\n         0.22738725, 0.3117161 ],\n        [0.2311706 , 0.2247422 , 0.23030376, ..., 0.21133746,\n         0.24978474, 0.3144625 ],\n        [0.22994642, 0.2216043 , 0.21443008, ..., 0.23380966,\n         0.27335462, 0.33697778],\n        ...,\n        [0.2801102 , 0.27076766, 0.28496662, ..., 1.4887002 ,\n         1.4666241 , 1.7220622 ],\n        [0.3205243 , 0.2954306 , 0.31341806, ..., 1.9154898 ,\n         1.42821   , 1.6312736 ],\n        [0.45734957, 0.3265505 , 0.33142075, ..., 2.7675717 ,\n                nan, 1.3527689 ]]], dtype=float32)Indexes: (3)timePandasIndexPandasIndex(DatetimeIndex(['1979-01-31', '1979-02-28', '1979-03-31', '1979-04-30',\n               '1979-05-31', '1979-06-30', '1979-07-31', '1979-08-31',\n               '1979-09-30', '1979-10-31',\n               ...\n               '2022-03-31', '2022-04-30', '2022-05-31', '2022-06-30',\n               '2022-07-31', '2022-08-31', '2022-09-30', '2022-10-31',\n               '2022-11-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=528, freq='M'))lonPandasIndexPandasIndex(Index([ 75.0, 75.25,  75.5, 75.75,  76.0, 76.25,  76.5, 76.75,  77.0, 77.25,\n        77.5, 77.75,  78.0, 78.25,  78.5, 78.75,  79.0, 79.25,  79.5, 79.75,\n        80.0],\n      dtype='float32', name='lon'))latPandasIndexPandasIndex(Index([ 5.0, 5.25,  5.5, 5.75,  6.0, 6.25,  6.5, 6.75,  7.0, 7.25,  7.5, 7.75,\n        8.0, 8.25,  8.5, 8.75,  9.0, 9.25,  9.5, 9.75, 10.0],\n      dtype='float32', name='lat'))Attributes: (0)\n\n\n… and as a matter of fact, we can graph this data, too!\n\nCHL_month = ds_resampled.mean(dim=['lat', 'lon']).hvplot(label='monthly resampling').options(color='red', )\n\n\nCHL_day = ds['CHL'].sel(lat=slice(10, 5), lon=slice(75, 80)).mean(dim=['lat', 'lon']).hvplot(label='daily resampling').options(color='blue')\n\n\n(CHL_day*CHL_month).options(title='Monthly vs Daily resampling of chlorophyll-a levels', xlabel='year')",
    "crumbs": [
      "Tutorials",
      "IO Zarr file"
    ]
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html",
    "href": "nasa-tutorials/00_Setup.html",
    "title": "00. Setup for tutorials",
    "section": "",
    "text": "This tutorial will help you set up your JupyterHub (or Hub) with tutorials and other materials from our Cloud Hackathon github repository and connect your github account."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "href": "nasa-tutorials/00_Setup.html#step-1.-login-to-the-hub",
    "title": "00. Setup for tutorials",
    "section": "Step 1. Login to the Hub",
    "text": "Step 1. Login to the Hub\nPlease go to the Openscapes Jupyter Hub. Log in with your GitHub Account, and select “Small”.\n\n\nNote: It takes a few minutes for the Hub to load. Please be patient!\n\nWhile the Hub loads, we’ll:\n\nDiscuss cloud environments\nSee how my Desktop is setup\nFork the Hackathon repository at github.com\nDiscuss python and conda environments\n\nThen, when the Hub is loaded, we’ll get oriented in the Hub and clone the forked repository into our cloud environment."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "href": "nasa-tutorials/00_Setup.html#discussion-cloud-environment",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Cloud environment",
    "text": "Discussion: Cloud environment\nA brief overview about the NASA Openscapes Cloud Environment (following lessons from the Clinic).\n\nCloud infrastructure\n\nCloud: AWS us-west-2\n\nData: AWS S3 (cloud) and NASA DAAC data centers (on-prem).\nCloud compute environment: 2i2c Jupyterhub deployment\n\nIDE: JupyterLab"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "href": "nasa-tutorials/00_Setup.html#discussion-my-desktop-setup",
    "title": "00. Setup for tutorials",
    "section": "Discussion: My desktop setup",
    "text": "Discussion: My desktop setup\nI’ll screenshare to show and/or talk through how I have oriented the following software we’re using:\n\n2i2c Jupyterhub (our main workspace)\nHackathon Repo &lt;&gt; Hackathon Book (my teaching notes, your reference material)\nZoom Chat\nSlack"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-2.-fork-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 2. Fork the Hackathon GitHub repository",
    "text": "Step 2. Fork the Hackathon GitHub repository\n“How do I get the tutorial repository into the Hub?”. There are 2 steps. The first is from GitHub.com to fork the tutorial repository so that there is a connected copy in your user account that you can edit and push changes that won’t affect the nasa-openscapes copy.\nGo to https://github.com/nasa-openscapes/2021-Cloud-Hackathon and fork the repository.\n\nNote: if you’ve already done this in the Pre-Hackathon Clinic, you’ll need to make sure you have the latest, following the daily setup instructions."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "href": "nasa-tutorials/00_Setup.html#discussion-python-and-conda-environments",
    "title": "00. Setup for tutorials",
    "section": "Discussion: Python and Conda environments",
    "text": "Discussion: Python and Conda environments\nWhy Python?\n\n\n\nPython Data Stack. Source: Jake VanderPlas, “The State of the Stack,” SciPy Keynote (SciPy 2015).\n\n\nDefault Python Environment:\nWe’ve set up the Python environment with conda.\n\n\n\n\n\n\nConda environment\n\n\n\n\n\nname: openscapes\nchannels:\n  - conda-forge\ndependencies:\n  - python=3.9\n  - pangeo-notebook\n  - awscli~=1.20\n  - boto3~=1.19\n  - gdal~=3.3\n  - rioxarray~=0.8\n  - xarray~=0.19\n  - h5netcdf~=0.11\n  - netcdf4~=1.5\n  - h5py~=2.10\n  - geoviews~=1.9\n  - matplotlib-base~=3.4\n  - hvplot~=0.7\n  - pyproj~=3.2\n  - bqplot~=0.12\n  - geopandas~=0.10\n  - zarr~=2.10\n  - cartopy~=0.20\n  - shapely==1.7.1\n  - pyresample~=1.22\n  - joblib~=1.1\n  - pystac-client~=0.3\n  - s3fs~=2021.7\n  - ipyleaflet~=0.14\n  - sidecar~=0.5\n  - jupyterlab-geojson~=3.1\n  - jupyterlab-git\n  - jupyter-resource-usage\n  - ipympl~=0.6\n  - conda-lock~=0.12\n  - pooch~=1.5\n  - pip\n  - pip:\n    - tqdm\n    - harmony-py\n    - earthdata\n    - zarr-eosdis-store\n\n\n\n\nBash terminal and installed software\nLibraries that are available from the terminal\n\ngdal 3.3 commands ( gdalinfo, gdaltransform…)\nhdf5 commands ( h5dump, h5ls..)\nnetcdf4 commands (ncdump, ncinfo …)\njq (parsing json files or streams from curl)\ncurl (fetch resources from the web)\nawscli (AWS API client, to interact with AWS cloud services)\nvim (editor)\ntree ( directory tree)\nmore …\n\n\n\nUpdating the environment\nScientific Python is a vast space and we only included libraries that are needed in our tutorials. Our default environment can be updated to include any Python library that’s available on pip or conda.\nThe project used to create our default environment is called corn (as it can include many Python kernels).\nIf we want to update a library or install a whole new environment we need to open an issue on this repository. We can help your teams do this during project hacktime.\n\n\ncorn 🌽"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "href": "nasa-tutorials/00_Setup.html#step-3.-jupyterhub-orientation",
    "title": "00. Setup for tutorials",
    "section": "Step 3. JupyterHub orientation",
    "text": "Step 3. JupyterHub orientation\nNow that the Hub is loaded, let’s get oriented.\n\n\nFirst impressions\n\nLauncher & the big blue button\n“home directory”"
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "href": "nasa-tutorials/00_Setup.html#step-4.-clone-the-hackathon-github-repository",
    "title": "00. Setup for tutorials",
    "section": "Step 4. Clone the Hackathon GitHub repository",
    "text": "Step 4. Clone the Hackathon GitHub repository\nNow we’ll clone the GitHub repository, using a git extension for the JupyterHub. Go to your github account, and navigate to the repository that you just created by forking from the Openscapes repository.\nClick to copy the url for cloning the repository.\n\nNow, go to JupyterHub and click on the git extension in the left panel and then click the blue button “Clone a Repository”.\n\nThen, paste the repository link to the forked repository that you copied from your github account into the “Clone a repo” pop up window. Then click the blue “CLONE” button. It will take a few moments to clone the repository into your Hub.\nYour link should look like https://github.com/YOUR-USERNAME/2021-Cloud-Hackathon. For example, the link is https://github.com/virdi/2021-Cloud-Hackathon. Note that it include your github username in the repo link.\n\nAlternatively, you can use the terminal (command line) as per github workflows: first-time setup.\nOnce the repository is cloned, you will see a new directory in the “File Browser” panel on the left named “2021-Cloud-Hackathon”. In this directory, you have all hackathon material including the tutorials and this book to follow along during other Tutorials. You are all set.\n\n\nREMEMBER: This is your copy (or fork) of the hackathon materials and jupyter notebooks. So feel free to make any changes to the content of this repository."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "href": "nasa-tutorials/00_Setup.html#jupyter-notebooks",
    "title": "00. Setup for tutorials",
    "section": "Jupyter notebooks",
    "text": "Jupyter notebooks\nLet’s get oriented to Jupyter notebooks, which we’ll use in all the tutorials."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "href": "nasa-tutorials/00_Setup.html#how-do-i-end-my-session",
    "title": "00. Setup for tutorials",
    "section": "How do I end my session?",
    "text": "How do I end my session?\n(Also see How do I end my Openscapes session? Will I lose all of my work?)\nWhen you are finished working for the day it is important to explicitly log out of your Openscapes session. The reason for this is it will save us a bit of money! When you keep a session active it uses up AWS resources and keeps a series of virtual machines deployed.\nStopping the server happens automatically when you log out, so navigate to “File -&gt; Log Out” and just click “Log Out”!\n!!! NOTE “logging out” - Logging out will NOT cause any of your work to be lost or deleted. It simply shuts down some resources. It would be equivalent to turning off your desktop computer at the end of the day."
  },
  {
    "objectID": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "href": "nasa-tutorials/00_Setup.html#step-5.-tracking-changes-optional",
    "title": "00. Setup for tutorials",
    "section": "Step 5. Tracking changes (Optional)",
    "text": "Step 5. Tracking changes (Optional)\nNow that you have forked and cloned the repository in your Hub, you can make changes (edit, add, and/or delete content) and track these files using git. In this step, we will provide an overview of how to use git using the graphical interface (the JupyterLab git extension).\n\nStep 5.1. Configure Git (git config)\nConfigure git with your name and email address as shown here.\ngit config --global user.name \"Makhan Virdi\"\ngit config --global user.email \"Makhan.Virdi@gmail.com\"\nOpen a new terminal: File &gt;&gt; New &gt;&gt; Terminal\n\nConfigure git to store your github credentials to avoid having to enter your github username and token each time you push changes to your repository(in Step 5.5, we will describe how to use github token instead of a password)\ngit config --global credential.helper store\n\n\nStep 5.2. Create a new file\nLet’s create a new file: In the left panel on your Hub, click on the “directory” icon and then double click on “2021-Cloud-Hackathon” directory. Then, create a new file using the text editor in your 2i2c JupyterHub (File &gt;&gt; New &gt;&gt; Text File). Add some text to this file, for example: A test file. Save this file and rename it to test.txt.\n\n\n\nStep 5.3. Track the changes to the new file (git add)\nClick the git icon in the left panel. You can see that the newly added file is in the “Untracked” section. You can click the + icon next to the file name to let git track this file for changes.\n\n\n\nStep 5.4. Commit the changes to the new file (git commit)\nNow, you will see that the file is Staged, which means that git is ready to take a snapshot of this file (and the repository) with the changes that you made. This snapshot is called a commit. To commit the changes, add a note (called a commit message) by typing in the text box that say “Summary”.\nNow, click the blue “COMMIT” button to commit this change.\n\nNote: A short message indicating the type of change to this file is a good practice. Optionally, a longer description may be added to the “Description” field.\n\n\n\n\nStep 5.5. Transmit committed changes to your github (git push)\nAt this stage, you have committed the changes to your git repository on your Hub. However, these changes are still on your Hub and needs to be transmitted to your repository on github (so that both the local copy on the JupyterHub and the remote copy on github are in sync).\nAs seen in the picture below, the git extension indicates (with an orange dot on the cloud icon) that it is ready to push your changes to the remote (remote = your repository on github.com). To push to github, click the cloud button with an up arrow (circled in red in the picture).\n\nWhen you push for the first time, it will ask that you input your credentials. You will need to set this up with your Personal Access Token (PAT), explained next.\n\n\nStep 5.6. Setup your Personal Access Token (PAT)\nWhen you see the following screenshot, GitHub is asking for you to input your credentials. (Note: you see this screenshot when you have committed work to push to GitHub.com, as detailed above).\n\nThe git extension in the Hub is prompting you to enter your github.com credentials. Enter you github.com username and a Personal Access Token (PAT); DO NOT use your password.\nTo create a PAT, visit https://github.com/settings/tokens/new and create a new token with the permission as per the image below and specify its validity for 90 days.\n\nIMPORTANT: You will see this token only once, so be sure to copy this. If you do not copy your token at this stage, you will need to generate a new token.\n\nOnce you generate the token, copy it and paste in the Hub window that prompted you to enter the “Personal Access Token”.\n\nGit will show a message at the bottom right telling that the changes were “Successfully pushed”. Also, you will see that the “cloud icon with an up arrow” no longer has an orange dot, indicating that there are no more committed changes to push to the remote (github.com).\n\nNote: You have configured git extension to store your credentials. You will not be prompted for your login/token again!\n\n\nThat’s all. You can use the same workflow (add &gt; commit &gt; push) for any other new or modified files!\n\n\nNote: If you are comfortable with the command line, you can use the Terminal (In Hub, New &gt; Terminal) and follow the steps outlined in the Clinic section."
  },
  {
    "objectID": "coc.html",
    "href": "coc.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "The ITCOocean Hack2week is dedicated to providing a harassment-free learning experience for everyone regardless of gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age or religion. We do not tolerate harassment of participants in any form. Sexual language and imagery is not appropriate either in-person or virtual form, including the Discussion boards and Slack workspace. Participants (including event volunteers and organizers) violating these rules may be sanctioned or expelled from the event at the discretion of the organizers."
  },
  {
    "objectID": "coc.html#definition-of-harassment",
    "href": "coc.html#definition-of-harassment",
    "title": "Code of Conduct",
    "section": "Definition of Harassment",
    "text": "Definition of Harassment\nHarassment includes, but is not limited to:\n\nVerbal comments that reinforce social structures of domination related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion.\nSexual images in public spaces\nDeliberate intimidation, stalking, or following\nHarassing photography or recording\nSustained disruption of talks or other events\nInappropriate physical contact\nUnwelcome sexual attention\nAdvocating for, or encouraging, any of the above behavior"
  },
  {
    "objectID": "coc.html#expectations",
    "href": "coc.html#expectations",
    "title": "Code of Conduct",
    "section": "Expectations",
    "text": "Expectations\nParticipants asked to stop any harassing behavior are expected to comply immediately. If a participant engages in harassing behavior, the organizers retain the right to take any actions to keep the event a welcoming environment for all participants. This includes warning the offender or expulsion from the event.\nThe organizers may take action to redress anything designed to, or with the clear impact of, disrupting the event or making the environment hostile for any participants. We expect participants to follow these rules at all the event venues and event-related social activities."
  },
  {
    "objectID": "coc.html#reporting-a-violation",
    "href": "coc.html#reporting-a-violation",
    "title": "Code of Conduct",
    "section": "Reporting a violation",
    "text": "Reporting a violation\nHarassment and other code of conduct violations reduce the value of the event for everyone. If someone makes you or anyone else feel unsafe or unwelcome, please report it as soon as possible.\nIf you feel comfortable contacting someone associated with our event, you may speak with one of the event organizers in person or contact an organizer on a private Slack channel."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "",
    "text": "This summer’s project relates to gap-filling (NAs) in remote-sensing data for chlorophyll. Why do gaps appear? Because the ocean color sensor cannot see through clouds. Why is this important? Chlorophyll-a is a key index of ocean productivity. Ocean color (after being processed through algorithms) produces an chlorophyll estimate but due to clouds there are still many gaps in the estimates. This animation shows the Arabian Sea in May 2022. White are clouds.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#how-can-machine-learning-help",
    "href": "index.html#how-can-machine-learning-help",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "How can machine-learning help?",
    "text": "How can machine-learning help?",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#goals-of-the-project",
    "href": "index.html#goals-of-the-project",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "Goals of the project",
    "text": "Goals of the project\nThe main goal is to show ‘proof of concept’ of deep-learning as a gap-filling approach and to compare different deep-learning algorithms for this task. The interns will compare the performance of different deep-learning algorithms and learn what kind of set-up and tuning is required for this task.\nAdditionally the goal is to develop tutorials to help others apply deep-learning to similar types of tasks or for this gap-filling task in different regions.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#data-set",
    "href": "index.html#data-set",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "Data set",
    "text": "Data set\nWe are using a analysis ready (zarr) file with a collection of ocean physical variables for the Indian Ocean. Why the Indian Ocean? It has a lot of clouds and there is a complex relationship between the physical variables and chlorophyll due to strong seasonal upwelling systems off the east coast of Africa (Somali upwelling system) and the southwest coast of India. Due to the different orientations of these coastlines, the relationship between wind and chlorophyll will be opposite and orthogonal. Coastal upwelling is driven by wind moving parallel to the coasts and these coasts face different directions (east versus west) and have different angles.\nThe data set was mainly developed during the 2023 summer interns. You can read about the data here Handbook on the Indian Ocean Zarr File.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#links",
    "href": "index.html#links",
    "title": "Machine Learning for Fisheries: Varanasi Internship 2024",
    "section": "Links",
    "text": "Links\n\nGitHub org: https://github.com/SAFS-Varanasi-Internship\nJupyterHub: https://fish.opensci.live/\nDiscussions: https://github.com/SAFS-Varanasi-Internship/Summer-2024/discussions",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "nasa-tutorials/index.html",
    "href": "nasa-tutorials/index.html",
    "title": "Tutorials Overview",
    "section": "",
    "text": "These tutorials are written in RMarkdown (R) and Jupyter Notebooks (Python)."
  },
  {
    "objectID": "nasa-tutorials/index.html#rmarkdown",
    "href": "nasa-tutorials/index.html#rmarkdown",
    "title": "Tutorials Overview",
    "section": "RMarkdown",
    "text": "RMarkdown\n\nOpen in RStudio\nRun code by clicking on the Run icon above a code chunk"
  },
  {
    "objectID": "nasa-tutorials/index.html#jupyter-notebook",
    "href": "nasa-tutorials/index.html#jupyter-notebook",
    "title": "Tutorials Overview",
    "section": "Jupyter Notebook",
    "text": "Jupyter Notebook\n\nOpen in Jupyter Notebook\nRun code by clicking on the code and clicking the little arrow at the top or by typing shift-return."
  },
  {
    "objectID": "notebooks-ml/ConvLSTM_Tutorial.html",
    "href": "notebooks-ml/ConvLSTM_Tutorial.html",
    "title": "Tutorial Summary: Training ConvLSTM Models for SST Prediction",
    "section": "",
    "text": "pip install xarray numpy dask matplotlib\n\nRequirement already satisfied: xarray in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (2024.5.0)\nRequirement already satisfied: numpy in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (1.26.4)\nRequirement already satisfied: dask in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (2024.5.1)\nRequirement already satisfied: matplotlib in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (3.9.0)\nRequirement already satisfied: packaging&gt;=23.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from xarray) (23.2)\nRequirement already satisfied: pandas&gt;=2.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from xarray) (2.2.2)\nRequirement already satisfied: click&gt;=8.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (8.1.7)\nRequirement already satisfied: cloudpickle&gt;=1.5.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (3.0.0)\nRequirement already satisfied: fsspec&gt;=2021.09.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (2024.5.0)\nRequirement already satisfied: partd&gt;=1.2.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (1.4.2)\nRequirement already satisfied: pyyaml&gt;=5.3.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (6.0.1)\nRequirement already satisfied: toolz&gt;=0.10.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (0.12.1)\nRequirement already satisfied: importlib-metadata&gt;=4.13.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from dask) (7.1.0)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (1.2.1)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (4.52.1)\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (1.4.5)\nRequirement already satisfied: pillow&gt;=8 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (10.3.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (3.1.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from matplotlib) (2.8.2)\nRequirement already satisfied: colorama in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from click&gt;=8.1-&gt;dask) (0.4.6)\nRequirement already satisfied: zipp&gt;=0.5 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from importlib-metadata&gt;=4.13.0-&gt;dask) (3.17.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from pandas&gt;=2.0-&gt;xarray) (2024.1)\nRequirement already satisfied: tzdata&gt;=2022.7 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from pandas&gt;=2.0-&gt;xarray) (2024.1)\nRequirement already satisfied: locket in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from partd&gt;=1.2.0-&gt;dask) (1.0.0)\nRequirement already satisfied: six&gt;=1.5 in c:\\users\\yuj81\\anaconda3\\envs\\py310\\lib\\site-packages (from python-dateutil&gt;=2.7-&gt;matplotlib) (1.16.0)\nNote: you may need to restart the kernel to use updated packages.\n\n\nThis tutorial demonstrated the process of training a ConvLSTM model for sea surface temperature (SST) prediction, including data preprocessing, model training, evaluation, and visualization.\n\nData Preprocessing\n\nLoad and preprocess SST data from a Zarr store.\nNormalize data and handle NaN values.\nSplit data into training, validation, and test sets.\n\n\n\nModel Construction and Training\n\nBuild a ConvLSTM model with TensorFlow and Keras.\nCompile and train the model with the Adam optimizer and MAE loss function.\n\n\n\nEvaluating and Visualizing the Model\n\nPrepare the test dataset and evaluate model performance.\nUsed utility functions to preprocess input data, make predictions, and visualize results.\nCompared predicted output with true output to assess model accuracy.\n\nIn this tutorial, we will use several important Python libraries. Below is an explanation of each import and its purpose:\n\nimport xarray as xr: Xarray is a library for working with labeled multi-dimensional arrays, particularly useful for handling time-series, meteorological, and oceanographic data. We will use Xarray to process and analyze datasets.\nimport numpy as np: NumPy is a fundamental library for scientific computing in Python, providing support for large multi-dimensional arrays and matrices, along with a collection of mathematical functions. We will use NumPy for array operations and data processing.\nimport dask.array as da: Dask is a parallel computing library, and Dask Array provides parallel computation capabilities similar to NumPy arrays, enabling us to handle larger datasets efficiently. We will use Dask to process data in parallel to improve effici ency.\nimport matplotlib.pyplot as plt: Matplotlib is a plotting library, and pyplot is a module within Matplotlib that offers MATLAB-like plotting functions. We will use pyplot to visualize our data and results.\nimport tensorflow as tf: TensorFlow is an open-source machine learning framework for building and training neural network models. We will use TensorFlow to create and train deep learning models.\n\nfrom tensorflow.keras.callbacks import EarlyStopping: Keras is a high-level neural networks API within TensorFlow that simplifies the construction of neural networks. EarlyStopping is a callback function that stops training early when a monitored metric stops improving, preventing overfitting.\nfrom tensorflow.keras.models import Sequential: Sequential is a type of model in Keras used for stacking multiple neural network layers linearly.\nfrom tensorflow.keras.layers import ConvLSTM2D, BatchNormalization, Conv2D, Dropout: These are different types of neural network layers in Keras. ConvLSTM2D is a convolutional long short-term memory layer for handling spatiotemporal data. BatchNormalization normalizes inputs after each layer to prevent vanishing gradients and speed up training. Conv2D is a two-dimensional convolutional layer used for image processing. Dropout is a regularization technique that randomly drops some neurons during training to prevent overfitting.\n\n\nBy using these libraries and modules together, we can efficiently process data, build and train complex deep learning models, and visualize the results to gain meaningful insights.\n\nimport xarray as xr\nimport numpy as np\n\nimport dask.array as da\n\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import ConvLSTM2D, BatchNormalization, Conv2D, Dropout\n\n\n\nChecking for Available GPUs\nWhen training ConvLSTM models, using a GPU can significantly speed up the training process compared to using a CPU. The following code checks if your environment includes a GPU and uses it for training if available. By default, TensorFlow will use the available GPU for training.\n\n# list all the physical devices\nphysical_devices = tf.config.list_physical_devices()\nprint(\"All Physical Devices:\", physical_devices)\n\n# list all the available GPUs\ngpus = tf.config.list_physical_devices('GPU')\nprint(\"Available GPUs:\", gpus)\n\n# Print infomation for available GPU if there exists any\nif gpus:\n    for gpu in gpus:\n        details = tf.config.experimental.get_device_details(gpu)\n        print(\"GPU Details:\", details)\nelse:\n    print(\"No GPU available\")\n\nAll Physical Devices: [PhysicalDevice(name='/physical_device:CPU:0', device_type='CPU'), PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\nAvailable GPUs: [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')]\nGPU Details: {'device_name': 'NVIDIA GeForce RTX 4060 Laptop GPU', 'compute_capability': (8, 9)}\n\n\n\n\nData Preprocessing.\n\nStep 1: Load the Dataset\nWe start by loading the dataset from a Zarr in the path of “PycharmProjects/ML/Intern/INDIAN_OCEAN_025GRID_DAILY.zarr”\n\n\n\nStep 2: Select a Subset of the Data\nNext, we select a specific region of interest by slicing the latitude and longitude dimensions.\n\n\nStep 3: Filter Out Dates with All NaN Values\nWe identify all dates where the SST variable contains only NaN values and exclude those dates from the dataset.lNotice that this step is very important since our model can’t take in any NaNs!\n\n\nStep 4: Sort and Select Data by Time\nWe sort the dataset by time and select the time range from January 1, 2015, to December 31, 2022.idated=True)\n\nzarr_ds = xr.open_zarr(store='PycharmProjects/ML/Intern/INDIAN_OCEAN_025GRID_DAILY.zarr', consolidated=True)\n\nzarr_new = zarr_ds.sel(lat=slice(35, -5), lon=slice(45,90))\n\nall_nan_dates = np.isnan(zarr_new[\"sst\"]).all(dim=[\"lon\", \"lat\"]).compute()\n\nzarr_ds = zarr_new.sel(time=all_nan_dates == False)\n\nzarr_ds = zarr_ds.sortby('time')\nzarr_ds = zarr_ds.sel(time=slice('2015-01-01', '2022-12-31'))\nzarr_ds\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;xarray.Dataset&gt; Size: 5GB\nDimensions:          (time: 2763, lat: 149, lon: 181)\nCoordinates:\n  * lat              (lat) float32 596B 32.0 31.75 31.5 ... -4.5 -4.75 -5.0\n  * lon              (lon) float32 724B 45.0 45.25 45.5 ... 89.5 89.75 90.0\n  * time             (time) datetime64[ns] 22kB 2015-01-01 ... 2022-12-31\nData variables: (12/19)\n    CHL              (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    CHL_uncertainty  (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    adt              (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    air_temp         (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    curr_dir         (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    curr_speed       (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    ...               ...\n    ug_curr          (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    v_curr           (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    v_wind           (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    vg_curr          (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    wind_dir         (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n    wind_speed       (time, lat, lon) float32 298MB dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\nAttributes: (12/17)\n    creator_email:              minhphan@uw.edu\n    creator_name:               Minh Phan\n    creator_type:               person\n    date_created:               2023-07-19\n    geospatial_lat_max:         32.0\n    geospatial_lat_min:         -12.0\n    ...                         ...\n    geospatial_lon_units:       degrees_east\n    source:                     Earth & Space Research (ESR), Copernicus Clim...\n    summary:                    Daily mean of 0.25 x 0.25 degrees gridded dat...\n    time_coverage_end:          2022-12-31T23:59:59\n    time_coverage_start:        1979-01-01T00:00:00\n    title:                      Climate Data for Coastal Upwelling Machine Le...xarray.DatasetDimensions:time: 2763lat: 149lon: 181Coordinates: (3)lat(lat)float3232.0 31.75 31.5 ... -4.5 -4.75 -5.0long_name :latitudestandard_name :latitudeunits :degrees_northarray([32.  , 31.75, 31.5 , 31.25, 31.  , 30.75, 30.5 , 30.25, 30.  , 29.75,\n       29.5 , 29.25, 29.  , 28.75, 28.5 , 28.25, 28.  , 27.75, 27.5 , 27.25,\n       27.  , 26.75, 26.5 , 26.25, 26.  , 25.75, 25.5 , 25.25, 25.  , 24.75,\n       24.5 , 24.25, 24.  , 23.75, 23.5 , 23.25, 23.  , 22.75, 22.5 , 22.25,\n       22.  , 21.75, 21.5 , 21.25, 21.  , 20.75, 20.5 , 20.25, 20.  , 19.75,\n       19.5 , 19.25, 19.  , 18.75, 18.5 , 18.25, 18.  , 17.75, 17.5 , 17.25,\n       17.  , 16.75, 16.5 , 16.25, 16.  , 15.75, 15.5 , 15.25, 15.  , 14.75,\n       14.5 , 14.25, 14.  , 13.75, 13.5 , 13.25, 13.  , 12.75, 12.5 , 12.25,\n       12.  , 11.75, 11.5 , 11.25, 11.  , 10.75, 10.5 , 10.25, 10.  ,  9.75,\n        9.5 ,  9.25,  9.  ,  8.75,  8.5 ,  8.25,  8.  ,  7.75,  7.5 ,  7.25,\n        7.  ,  6.75,  6.5 ,  6.25,  6.  ,  5.75,  5.5 ,  5.25,  5.  ,  4.75,\n        4.5 ,  4.25,  4.  ,  3.75,  3.5 ,  3.25,  3.  ,  2.75,  2.5 ,  2.25,\n        2.  ,  1.75,  1.5 ,  1.25,  1.  ,  0.75,  0.5 ,  0.25,  0.  , -0.25,\n       -0.5 , -0.75, -1.  , -1.25, -1.5 , -1.75, -2.  , -2.25, -2.5 , -2.75,\n       -3.  , -3.25, -3.5 , -3.75, -4.  , -4.25, -4.5 , -4.75, -5.  ],\n      dtype=float32)lon(lon)float3245.0 45.25 45.5 ... 89.5 89.75 90.0long_name :longitudestandard_name :longitudeunits :degrees_eastarray([45.  , 45.25, 45.5 , 45.75, 46.  , 46.25, 46.5 , 46.75, 47.  , 47.25,\n       47.5 , 47.75, 48.  , 48.25, 48.5 , 48.75, 49.  , 49.25, 49.5 , 49.75,\n       50.  , 50.25, 50.5 , 50.75, 51.  , 51.25, 51.5 , 51.75, 52.  , 52.25,\n       52.5 , 52.75, 53.  , 53.25, 53.5 , 53.75, 54.  , 54.25, 54.5 , 54.75,\n       55.  , 55.25, 55.5 , 55.75, 56.  , 56.25, 56.5 , 56.75, 57.  , 57.25,\n       57.5 , 57.75, 58.  , 58.25, 58.5 , 58.75, 59.  , 59.25, 59.5 , 59.75,\n       60.  , 60.25, 60.5 , 60.75, 61.  , 61.25, 61.5 , 61.75, 62.  , 62.25,\n       62.5 , 62.75, 63.  , 63.25, 63.5 , 63.75, 64.  , 64.25, 64.5 , 64.75,\n       65.  , 65.25, 65.5 , 65.75, 66.  , 66.25, 66.5 , 66.75, 67.  , 67.25,\n       67.5 , 67.75, 68.  , 68.25, 68.5 , 68.75, 69.  , 69.25, 69.5 , 69.75,\n       70.  , 70.25, 70.5 , 70.75, 71.  , 71.25, 71.5 , 71.75, 72.  , 72.25,\n       72.5 , 72.75, 73.  , 73.25, 73.5 , 73.75, 74.  , 74.25, 74.5 , 74.75,\n       75.  , 75.25, 75.5 , 75.75, 76.  , 76.25, 76.5 , 76.75, 77.  , 77.25,\n       77.5 , 77.75, 78.  , 78.25, 78.5 , 78.75, 79.  , 79.25, 79.5 , 79.75,\n       80.  , 80.25, 80.5 , 80.75, 81.  , 81.25, 81.5 , 81.75, 82.  , 82.25,\n       82.5 , 82.75, 83.  , 83.25, 83.5 , 83.75, 84.  , 84.25, 84.5 , 84.75,\n       85.  , 85.25, 85.5 , 85.75, 86.  , 86.25, 86.5 , 86.75, 87.  , 87.25,\n       87.5 , 87.75, 88.  , 88.25, 88.5 , 88.75, 89.  , 89.25, 89.5 , 89.75,\n       90.  ], dtype=float32)time(time)datetime64[ns]2015-01-01 ... 2022-12-31axis :Tcomment :Data is averaged over the daylong_name :time centered on the daystandard_name :timetime_bounds :2000-01-01 00:00:00 to 2000-01-01 23:59:59array(['2015-01-01T00:00:00.000000000', '2015-01-02T00:00:00.000000000',\n       '2015-01-03T00:00:00.000000000', ..., '2022-12-29T00:00:00.000000000',\n       '2022-12-30T00:00:00.000000000', '2022-12-31T00:00:00.000000000'],\n      dtype='datetime64[ns]')Data variables: (19)CHL(time, lat, lon)float32dask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;_ChunkSizes :[1, 256, 256]ancillary_variables :flags CHL_uncertaintycoverage_content_type :modelResultinput_files_reprocessings :Processors versions: MODIS R2022.0NRT/VIIRSN R2022.0NRT/OLCIA 07.02/VIIRSJ1 R2022.0NRT/OLCIB 07.02long_name :Chlorophyll-a concentration - Mean of the binned pixelsstandard_name :mass_concentration_of_chlorophyll_a_in_sea_watertype :surfaceunits :milligram m-3valid_max :1000.0valid_min :0.0\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nCHL_uncertainty\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_ChunkSizes :\n\n[1, 256, 256]\n\ncoverage_content_type :\n\nqualityInformation\n\nlong_name :\n\nChlorophyll-a concentration - Uncertainty estimation\n\nunits :\n\n%\n\nvalid_max :\n\n32767\n\nvalid_min :\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nadt\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomment :\n\nThe absolute dynamic topography is the sea surface height above geoid; the adt is obtained as follows: adt=sla+mdt where mdt is the mean dynamic topography; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nAbsolute dynamic topography\n\nstandard_name :\n\nsea_surface_height_above_geoid\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nair_temp\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\n2 metre temperature\n\nnameCDM :\n\n2_metre_temperature_surface\n\nnameECMWF :\n\n2 metre temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n2t\n\nstandard_name :\n\nair_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\ncurr_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomments :\n\nComputed from total surface current velocity elements. Velocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage direction of total surface currents\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\ncurr_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomments :\n\nVelocities are an average over the top 30m of the mixed layer\n\ndepth :\n\n15m\n\nlong_name :\n\naverage total surface current speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nmlotst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(351, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_ChunkSizes :\n\n[1, 681, 1440]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nDensity ocean mixed layer thickness\n\nstandard_name :\n\nocean_mixed_layer_thickness_defined_by_sigma_theta\n\nunit_long :\n\nMeters\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n51.44 MiB\n\n\nShape\n(2763, 149, 181)\n(500, 149, 181)\n\n\nDask graph\n7 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                     181 149 2763\n\n\n\n\n\n\n\n\nsla\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nancillary_variables :\n\nerr_sla\n\ncomment :\n\nThe sea level anomaly is the sea surface height above mean sea surface; it is referenced to the [1993, 2012] period; see the product user manual for details\n\ngrid_mapping :\n\ncrs\n\nlong_name :\n\nSea level anomaly\n\nstandard_name :\n\nsea_surface_height_above_sea_level\n\nunits :\n\nm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nso\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(351, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n_ChunkSizes :\n\n[1, 7, 341, 720]\n\ncell_methods :\n\narea: mean\n\nlong_name :\n\nmean sea water salinity at 0.49 metres below ocean surface\n\nstandard_name :\n\nsea_water_salinity\n\nunit_long :\n\nPractical Salinity Unit\n\nunits :\n\n1e-3\n\nvalid_max :\n\n28336\n\nvalid_min :\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n51.44 MiB\n\n\nShape\n(2763, 149, 181)\n(500, 149, 181)\n\n\nDask graph\n7 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                     181 149 2763\n\n\n\n\n\n\n\n\nsst\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\nSea surface temperature\n\nnameCDM :\n\nSea_surface_temperature_surface\n\nnameECMWF :\n\nSea surface temperature\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\nsst\n\nstandard_name :\n\nsea_surface_temperature\n\nunits :\n\nK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\ntopo\n\n\n(lat, lon)\n\n\nfloat64\n\n\ndask.array&lt;chunksize=(149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncolorBarMaximum :\n\n8000.0\n\ncolorBarMinimum :\n\n-8000.0\n\ncolorBarPalette :\n\nTopography\n\ngrid_mapping :\n\nGDAL_Geographics\n\nioos_category :\n\nLocation\n\nlong_name :\n\nTopography\n\nstandard_name :\n\naltitude\n\nunits :\n\nmeters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n210.70 kiB\n210.70 kiB\n\n\nShape\n(149, 181)\n(149, 181)\n\n\nDask graph\n1 chunks in 3 graph layers\n\n\nData type\nfloat64 numpy.ndarray\n\n\n\n\n         181 149\n\n\n\n\n\n\n\n\nu_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\neastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nu_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\n10 metre U wind component\n\nnameCDM :\n\n10_metre_U_wind_component_surface\n\nnameECMWF :\n\n10 metre U wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10u\n\nstandard_name :\n\neastward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nug_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nzonal geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_eastward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nv_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomment :\n\nVelocities are an average over the top 30m of the mixed layer\n\ncoverage_content_type :\n\nmodelResult\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional total surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148 ; WIND source: ECMWF ERA5 10m wind DOI: 10.24381/cds.adbb2d47 ; SST source: CMC 0.2 deg SST V2.0 DOI: 10.5067/GHCMC-4FM02\n\nstandard_name :\n\nnorthward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nv_wind\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\n10 metre V wind component\n\nnameCDM :\n\n10_metre_V_wind_component_surface\n\nnameECMWF :\n\n10 metre V wind component\n\nproduct_type :\n\nanalysis\n\nshortNameECMWF :\n\n10v\n\nstandard_name :\n\nnorthward_wind\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nvg_curr\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncomment :\n\nGeostrophic velocities calculated from absolute dynamic topography\n\ndepth :\n\n15m\n\nlong_name :\n\nmeridional geostrophic surface current\n\nsource :\n\nSSH source: CMEMS SSALTO/DUACS SEALEVEL_GLO_PHY_L4_MY_008_047 DOI: 10.48670/moi-00148\n\nstandard_name :\n\ngeostrophic_northward_sea_water_velocity\n\nunits :\n\nm s-1\n\nvalid_max :\n\n3.0\n\nvalid_min :\n\n-3.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nwind_dir\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\n10 metre wind direction\n\nunits :\n\ndegrees\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\n\n\n\nwind_speed\n\n\n(time, lat, lon)\n\n\nfloat32\n\n\ndask.array&lt;chunksize=(51, 149, 181), meta=np.ndarray&gt;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlong_name :\n\n10 metre absolute speed\n\nunits :\n\nm s**-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArray\nChunk\n\n\n\n\nBytes\n284.25 MiB\n10.29 MiB\n\n\nShape\n(2763, 149, 181)\n(100, 149, 181)\n\n\nDask graph\n30 chunks in 6 graph layers\n\n\nData type\nfloat32 numpy.ndarray\n\n\n\n\n                                                             181 149 2763\n\n\n\n\n\nIndexes: (3)latPandasIndexPandasIndex(Index([ 32.0, 31.75,  31.5, 31.25,  31.0, 30.75,  30.5, 30.25,  30.0, 29.75,\n       ...\n       -2.75,  -3.0, -3.25,  -3.5, -3.75,  -4.0, -4.25,  -4.5, -4.75,  -5.0],\n      dtype='float32', name='lat', length=149))lonPandasIndexPandasIndex(Index([ 45.0, 45.25,  45.5, 45.75,  46.0, 46.25,  46.5, 46.75,  47.0, 47.25,\n       ...\n       87.75,  88.0, 88.25,  88.5, 88.75,  89.0, 89.25,  89.5, 89.75,  90.0],\n      dtype='float32', name='lon', length=181))timePandasIndexPandasIndex(DatetimeIndex(['2015-01-01', '2015-01-02', '2015-01-03', '2015-01-04',\n               '2015-01-05', '2015-01-06', '2015-01-07', '2015-01-08',\n               '2015-01-09', '2015-01-10',\n               ...\n               '2022-12-22', '2022-12-23', '2022-12-24', '2022-12-25',\n               '2022-12-26', '2022-12-27', '2022-12-28', '2022-12-29',\n               '2022-12-30', '2022-12-31'],\n              dtype='datetime64[ns]', name='time', length=2763, freq=None))Attributes: (17)creator_email :minhphan@uw.educreator_name :Minh Phancreator_type :persondate_created :2023-07-19geospatial_lat_max :32.0geospatial_lat_min :-12.0geospatial_lat_resolution :0.25geospatial_lat_units :degrees_northgeospatial_lon_max :102.0geospatial_lon_min :42.0geospatial_lon_resolution :0.25geospatial_lon_units :degrees_eastsource :Earth & Space Research (ESR), Copernicus Climate Change Service (C3S), Copernicus Marine Environment Monitoring Service (CMEMS), United States Geological Survey (USGS)summary :Daily mean of 0.25 x 0.25 degrees gridded data from multiple climate variables that may influence the patterns of coastal upwelling in the focused areatime_coverage_end :2022-12-31T23:59:59time_coverage_start :1979-01-01T00:00:00title :Climate Data for Coastal Upwelling Machine Learning Project in Indian Ocean",
    "crumbs": [
      "Tutorials",
      "ConvLSTM for SST prediction"
    ]
  },
  {
    "objectID": "support.html#thank-you-for-inspiration-and-content",
    "href": "support.html#thank-you-for-inspiration-and-content",
    "title": "Acknowledgements",
    "section": "Thank you for inspiration and content!",
    "text": "Thank you for inspiration and content!\nThank you to the open science community that has created software, teaching resources, and workflows that we have been able to build off of and be inspired by. These include: NASA Openscapes • OceanHackWeek • SnowEx Hackweek • eScience Institute, University of Washington • ICESat-2 Hackweek • Project Jupyter • Pangeo Project • CryoCloud   Thanks to OceanHackWeek for content, inspiration, and the opportunity to test out ideas. A big thanks to the SDM team at OceanHackWeek 2023 who helped test and develop SDM tutorials for the ITCOocean Hack2week 2023: Catherine Courtier, Mackenzie Fiss, Denisse Fierro Arcos, Paulo Freire, Jade Hong, Caitlin O’Brien, Mary Solokas, Laura Tsang, Tylar Murray, Ben Tupper! OHW23 SDM team project."
  },
  {
    "objectID": "support.html#thank-you-for-support",
    "href": "support.html#thank-you-for-support",
    "title": "Acknowledgements",
    "section": "Thank you for support!",
    "text": "Thank you for support!\n\nThank you! INCOIS and ITCOocean provided all the logistical support and supported Nimit Kumar, TVS Uday Bhaskar and Swarnali Majumder’s participation. CMLRE supported Smitha BR’s participation and IITM supported Aditi Modi. A NOAA International Fellowship supported Eli Holmes’ visit. 2i2c provided the JupyterHub infrastructure. ESIPfed provided funding for the JupyterHub via their ESIP Lab fund. Undergraduate summer interns, Minh Phan and Jiarui Yu, were supported by the Usha and S. Rao Varanasi endowment for Math-Fish student support at the University of Washington (Seattle, WA)."
  }
]